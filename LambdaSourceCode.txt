exports.handler = function (event, context) {
    
    try {
        console.log("event.session.application.applicationId=" + event.session.application.applicationId);

        // if (event.session.application.applicationId !== "amzn1.ask.skill.50c44d6a-970c-48f4-923f-7bb32f6a0196") {
        //     context.fail("Invalid Application ID");
        // }
        
        if (event.session.new) {
            onSessionStarted({requestId: event.request.requestId}, event.session);
        }

        if (event.request.type === "LaunchRequest") {
                onLaunch(event.request,
                    event.session,
                    function callback(sessionAttributes, speechletResponse) {
                        context.succeed(buildResponse(sessionAttributes, speechletResponse));
                    });
            
        } else if (event.request.type === "IntentRequest") {
            onIntent(event.request,
                event.session,
                function callback(sessionAttributes, speechletResponse) {
                    context.succeed(buildResponse(sessionAttributes, speechletResponse));
                });
                
        } else if (event.request.type === "SessionEndedRequest") {
            //onSessionEnded(event.request, event.session);
            context.succeed();
        }
    } catch (e) {
        context.fail("Exception: " + e);
    }
};


/**
 * Called when the session starts.
 */
function onSessionStarted(sessionStartedRequest, session, callback) {
    console.log("onSessionStarted requestId=" + sessionStartedRequest.requestId
        + ", sessionId=" + session.sessionId);
}

/**
 * Called when the user invokes the skill without specifying what they want.
 */
function onLaunch(launchRequest, session, callback) {
    console.log("onLaunch requestId=" + launchRequest.requestId
        + ", sessionId=" + session.sessionId);
        
    sessionAttributes = {
        "mode" : "main menu",
        "recipe": "",
        "step" : 1
    };
        
    callback(sessionAttributes,
        buildSpeechletResponse("recipe assistant, what recipe would you like to make?", false));
}

function onIntent(intentRequest, session, callback) {
    console.log("onIntent requestId=" + intentRequest.requestId
        + ", sessionId=" + session.sessionId);
        
    var slotsValue = "";
        
    var intent = intentRequest.intent,
        intentName = intentRequest.intent.name;
        sessionAtrributes = session.attributes;
        
    if (intentName === "RecipeIntent") {
        recipe(intent, session, callback);
    } else if (intentName === "IngredientIntent") {
      ingredient(intent, session, callback);
    } else if (intentName === "TransitionIntent") {
      transition(intent, session, callback);
    } else if (intentName === "HelpIntent") {
        help(intent, session, callback);
    } else {
        repeat(intent, session, callback);
    }
    
}

function recipe(intentRequest, session, callback) {
    //fill in this function
    sessionAttributes = session.attributes;
    callback(sessionAttributes,
        buildSpeechletResponse("Can You Even Cook?", false));
}

function ingredient(intentRequest, session, callback) {
    //fill in this function
    sessionAttributes = session.attributes;
    callback(sessionAttributes,
        buildSpeechletResponse("Milk", false));
}

function transition(IntentRequest, session, callback) {
    //fill in this function
    sessionAttributes = session.attributes;
    callback(sessionAttributes,
        buildSpeechletResponse("start, next, exit, last, quit, etc", false));
}

function help(IntentRequest, session, callback) {
    //fill in this function
    sessionAttributes = session.attributes;
    callback(sessionAttributes,
        buildSpeechletResponse("write code for what can I say", false));
}

function repeat(intent, session, callback) {
    sesstionAttribute = session.attribute;
    callback(session.attributes,
        buildSpeechletResponse("I do not understand that statement. If you need help say, what can I say, for a list of possible statements.", false));
}

function handleFinishSessionRequest(intent, session, callback) {
    callback(session.attributes,
        buildSpeechletResponse("Good bye!", true));
}

/**
 * Speech Output functions
 */
function buildSpeechletResponse(outputText, shouldEndSession) {
        return {
        outputSpeech: {
            type: "PlainText",
            text: outputText
        },
        shouldEndSession: shouldEndSession
    };
}

function buildResponse(sessionAttributes, speechletResponse) {
    return {
        version: "1.0",
        sessionAttributes: sessionAttributes,
        response: speechletResponse
    };

}